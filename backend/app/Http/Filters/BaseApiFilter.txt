<?php

namespace App\Http\Filters;

use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\Builder;
use App\Http\Requests\BaseApiFormRequest;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;

abstract class BaseApiFilter
{
    protected ?Builder $builder = null;

    protected bool $pagination = false;

    protected int $defaultSize = 20;

    protected array $queryParams = [];

    public function __construct(protected readonly Request $request)
    {
        if ($this->request instanceof BaseApiFormRequest) {
            $this->queryParams = $this->request->validated();
        } else {
            $this->queryParams = $this->request->all();
        }

        $this->onInit();
    }

    public function onInit(): void
    {
        // to do logic in children class
    }

    public function applyFilter(Builder $builder): Builder|LengthAwarePaginator
    {
        $this->builder = $builder;

        // dd($this->queryParams);
        $this->callMethods($this->queryParams, $this->builder);

        $filterClass = static::class;
        $reflectionClass = new \ReflectionClass($filterClass);

        if ($reflectionClass->getMethod('defaultOrder')->class === $filterClass) {
            call_user_func([$this, 'defaultOrder']);
        }

        if ($reflectionClass->getMethod('applyWith')->class === $filterClass) {
            call_user_func([$this, 'applyWith']);
        }

        if ($this->pagination) {
            return $this->paginate();
        }
        return $this->builder;
    }

    public function callMethods(array $params, Builder $builder): void
    {
        foreach ($params as $field => $value) {
            $method = Str::camel($field);

            if (method_exists($this, $method)) {
                call_user_func([$this, $method], $value, $builder);
            }
        }
    }

    protected function applyWith(): void
    {
        // override in child class
    }

    protected function defaultOrder(): void
    {
        // override in child class
    }

    public function paginate(): LengthAwarePaginator
    {
        return $this->builder->paginate(
            perPage: $this->request->integer('per_page', $this->defaultSize),
            page: $this->request->integer('page', 1)
        );
    }

    public function getRequest(): Request
    {
        return $this->request;
    }

}
