<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\VerificationCode;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Validator;
use Laravel\Sanctum\PersonalAccessToken;

class UserAuthUpdateController extends Controller
{
    //sms code token
    public function getToken()
    {
        $url = "https://notify.eskiz.uz/api/auth/login";
        $response = Http::post($url, [
            'email' =>'example@gmail.com',
            'password' =>"01230123"
        ]);

        DB::table('app_settings')->delete();

        DB::table('app_settings')->insert([
            'token' => $response['data']['token'],
            'refresh_token' => '',
            'token_type' => $response['token_type'],
            'expires_in' => Carbon::now()->addDays(30),
            'refresh_token_expires_in' => null,
            'created_at' => Carbon::now(),
            'updated_at' => Carbon::now(),
        ]);

        return json_decode($response);

    }
    // public function getRefreshToken()
    // {
    //     $app_settings = DB::table('app_settings')->latest()->first();
    //     $url = "https://notify.eskiz.uz/api/auth/refresh";
    //     $response = Http::withToken($app_settings->token)->patch($url);
    //     DB::table('app_settings')->where('id', $app_settings->id)->update([
    //         'expires_in' => Carbon::now()->addDays(29)
    //     ]);
    //     // return json_decode($response);
    //     // sendResponse($response,'success');
    // }


    public function deleteAndGetNewToken()
    {
        $app_settings = DB::table('app_settings')->latest()->first();
        $url = "notify.eskiz.uz/api/auth/invalidate";
        $response = Http::withToken($app_settings->token)->delete($url);
        // DB::table('app_settings')->where('id', $app_settings->id)->update([
        //     'expires_in' => Carbon::now()->addDays(29)
        // ]);

        $response = $this->getToken();
        return $response;
        // return json_decode($response);
        // sendResponse($response,'success');
    }


    //sms code
    public function sendSms($phone_number, $message)
    {
        $app_settings = DB::table('app_settings')->latest()->first();
        $now = Carbon::now();
        if($now->isAfter($app_settings->expires_in))
        {
            $this->deleteAndGetNewToken();
            $app_settings = DB::table('app_settings')->latest()->first();
        }
        $url = "https://notify.eskiz.uz/api/message/sms/send";
        $response = Http::withToken($app_settings->token)->post($url, [
            'mobile_phone' => $phone_number,
            'message' => 'CARVAN - Sizning bir martalik tasdiqlash kodingiz : '.$message,

        ]);

        if($response->getStatusCode() != 200) {
            throw new Exception($response->getStatusCode());
            // sendError($response->getStatusCode());
        }
        return $response;
    }



    public function send_verification_code(Request $request)
    {
        $validator = Validator::make($request->all(),[
            'phone_number' => 'required|string|min:12|max:12'
        ]);

        if ($validator->fails()) {
            return sendError($validator->errors(), '', 403);
        }

        $accessToken = $request->bearerToken();
        $token = PersonalAccessToken::findToken($accessToken);
        $userId = $token->tokenable_id;

        $code = rand(100000, 999999);
        if ($request->phone_number == '998901234567') {
            $code = 100000;
        }

        $this->sendSms($request->phone_number, $code);

        $oldVrf = VerificationCode::where('user_id', $userId)->first();
        if(!empty($oldVrf)){
            $oldVrf->delete();
        }

        $sendedVrf = VerificationCode::create([
            'user_id' => $userId,
            'sms_code' => $code,
            'expire_at' => Carbon::now()->addMinutes(2),
            'phone_number' => $request->phone_number
        ]);

        return sendResponse($sendedVrf,'success');
    }

    public function check_code_and_update_phone_number(Request $request)
    {
        $validator = Validator::make($request->all(),[
            'sms_code' => 'required|integer'
        ]);

        if ($validator->fails()) {
            return sendError($validator->errors(),'error validation');
        }


        $accessToken = $request->bearerToken();
        $token = PersonalAccessToken::findToken($accessToken);
        $userId = $token->tokenable_id;

        $verificationCode = VerificationCode::where('user_id', $userId)->where('sms_code', $request->sms_code)->first();

        $now = Carbon::now();
        if (!$verificationCode) {
            return sendError('Your OTP is not correct');
        }elseif($verificationCode && $now->isAfter($verificationCode->expire_at)){
            return sendError('Your OTP has been expired');
        }

        $updateUser = User::findOrFail($userId);
        $updateUser->phone_number = $verificationCode->phone_number;
        $updateUser->save();

        return sendResponse($updateUser,__('locale.user_phone_number_update_successfully'));
    }

    public function resend_verification_code(Request $request)
    {
        $validator = Validator::make($request->all(),[
            'phone_number' => 'required|string|min:12|max:12'
        ]);

        if ($validator->fails()) {
            return sendError($validator->errors(), '', 403);
        }

        $accessToken = $request->bearerToken();
        $token = PersonalAccessToken::findToken($accessToken);
        $userId = $token->tokenable_id;
        $oldVrf = VerificationCode::where('user_id', $userId)->first();
        if(!empty($oldVrf)){
            $oldVrf->delete();
        }


         $code = rand(100000, 999999);
         if ($request->phone_number == '998991234567') {
             $code = 100000;
         }

         $this->sendSms($request->phone_number, $code);


         $sendedVrf = VerificationCode::create([
             'user_id' => $userId,
             'sms_code' => $code,
             'expire_at' => Carbon::now()->addMinutes(1)
         ]);

         return sendResponse($sendedVrf,'success');
    }
}
